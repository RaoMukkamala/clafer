abstract Module  
    `Element *

abstract Element
    isEssential ?

abstract Clafer : Element
    isAbstract ?
        [~parent]
    name : string
    super -> Clafer *
    parent -> Clafer ?
        [~isAbstract]
    child : Element *
    reference -> Expression ?
    groupCardinality : Interval
    cardinality : Interval
    -- type rule
    [reference in (SetExp - SetComprVarRef)]

abstract Interval
    min : integer {[min >= 0]}
    max : integer {[max >= min || max == -1]}

abstract String : Clafer
    value : string

abstract Integer : Clafer
    value : integer

abstract Constraint : Element
    `LogicalExp +

abstract LogicalExp

abstract PropositionalExp : LogicalExp
    lexp : LogicalExp 1..3
    xor op {Not, Iff, Implies, Or, Xor, And, ImpliesElse}
    [ImpliesElse => #lexp = 3 else Not => #lexp = 1 else #lexp = 2]

abstract CompareExp : LogicalExp
    exp : Expression 2
    xor op 
        xor SetOp   {Eq, NEq, In, StrictIn}
        xor ArithOp {Lt, Gt, LtE, GtE}
    -- type rule
    [SetOp => exp in SetExp
         else exp in IntExp || exp in StringExp)]

abstract QuantifiedSet : LogicalExp, SetComprehension
    xor quantifier {No, Lone, One, Some, All}

abstract Expression

abstract SetComprehension : Expression
    exp : Expression
    `LogicalExp *
    variable : string *
    isDisjoint ?
        [#variable > 1]
    -- type rule
    [exp in SetExp]

abstract SetComprVarRef : Expression
    ref -> SetComprehension.variable

abstract FunctionExp : Expression
    exp : Expression 1..2
    xor function
        xor StringFun {Concatenation, Capitalize}
        xor SetFun    {Union, Difference, Intersection, Join, Domain, Codomain}
        xor IntSetFun {SetCardinality, Sum, Min, Max}
        xor ArithFun  {Negation, Plus, Minus, Multiply}
    [Capitalize || IntSetFun || Negation => #exp = 1 else #exp = 2]
    -- type rule
    [StringFun => exp in StringExp else
     SetFun    => exp in SetExp else
     IntSetFun => exp in SetExp else
     exp in IntExp]

abstract ClaferRef : Expression
    ref -> Clafer

-- types
SetExp -> ((SetComprehension - QuantifiedSet) + SetComprVarRef + ClaferRef +
           (FunctionExp :> FunctionExp.function.SetFun))

IntExp -> ClaferRef :> ClaferRef.ref.Integer

StringExp -> ClaferRef :> ClaferRef.ref.String