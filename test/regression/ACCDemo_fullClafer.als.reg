open util/integer
pred show {}


abstract sig c0_car
{ r_c0_transmission : one c0_transmission
, r_c0_fca : lone c0_fca
, r_c0_cc : one c0_cc }
{ (some (this.@r_c0_cc).@r_c0_acc) => (some this.@r_c0_fca) }

sig c0_transmission
{ r_c0_automatic : lone c0_automatic
, r_c0_manual : lone c0_manual }
{ one @r_c0_transmission.this
  let children = (r_c0_automatic + r_c0_manual) | one children }

sig c0_automatic
{}
{ one @r_c0_automatic.this }

sig c0_manual
{}
{ one @r_c0_manual.this }

sig c0_fca extends c1_fca
{}
{ one @r_c0_fca.this }

sig c0_cc extends c1_cc
{}
{ one @r_c0_cc.this }

abstract sig c1_fca
{ r_c0_sensor : one c0_sensor }

sig c0_sensor
{ r_c0_radar : lone c0_radar
, r_c0_lidar : lone c0_lidar }
{ one @r_c0_sensor.this
  let children = (r_c0_radar + r_c0_lidar) | one children }

sig c0_radar
{}
{ one @r_c0_radar.this }

sig c0_lidar
{}
{ one @r_c0_lidar.this }

abstract sig c1_cc
{ r_c0_switches : set c0_switches
, r_c0_acc : lone c0_acc }
{ 2 <= #r_c0_switches and #r_c0_switches <= 3 }

sig c0_switches
{ r_c0_backlight : lone c0_backlight }
{ one @r_c0_switches.this }

sig c0_backlight
{}
{ one @r_c0_backlight.this }

sig c0_acc
{}
{ one @r_c0_acc.this }

abstract sig c0_camaro extends c0_car
{ r_c0_transformer : lone c0_transformer }
{ all  s : (this.@r_c0_cc).@r_c0_switches | some s.@r_c0_backlight }

sig c0_transformer
{}
{ one @r_c0_transformer.this
  (#(((this.~@r_c0_transformer).@r_c0_cc).@r_c0_switches)) = 3 }

one sig c0_bumbleBee extends c0_camaro
{}
{ some this.@r_c0_transformer
  some (this.@r_c0_transmission).@r_c0_manual }

